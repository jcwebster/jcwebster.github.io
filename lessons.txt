This comment can be found under Commits on Oct. 2 -> Merge pull request #1 from jcwebster/master by clicking #1.

Second time around... I got the updates I made pushed to Github.

I made the mistake of making a branch in cmd line, and I still don't know how to switch to it to work 'on it'.

Then I learned that you have to (in my still working knowledge):
git pull origin <branch> (updates your files) (git fetch does this if other authors are working on the project) [must be a remote branch… maybe try omitting origin next time]

make your edits

git add

git commit -m "type msg like so"

and then....
git push origin <branch>, which would be master... until i figure out how to switch branches


I've now gotten the hang of the editing routine. This is exciting.
I learned how to switch branches, push from a branch remotely and see that push to the repository online. See below.

after committing,
git push origin <branch you've edited on>
This is where i made a pull request and deleted <branch edited> online. However it still seemed to be present in cmd.
<!-- figure out how to delete a branch remotely here.-->
git checkout master
git pull origin master
All refreshed!

Pushing and Branches

The local copies of branches (on github) and the remote branches (on my laptop) are TWO DIFFERENT THINGS. When you work on master on your laptop, it is not the same master as on github.com. This means that even if you work directly on master on laptop, pull or git fetch origin first. This way you are working with the most updated branch. Likewise, when you push your updates from your laptop, they update the respective branch on github.com. 

Command:

git push origin <branchname>

Then, deleting a branch on laptop doesn’t delete it on github.com. To do so, use:

git push origin —delete <branchname>


MERGING: (read in brackets first)

[So, day 2: I didn’t actually fix it the way I thought I did last night. I revisited today, and found a great source on how to do what I wanted.  I checked out master. I ‘reset’ the master branch to have HEAD point to the hash of a previous commit, before I had screwed up any formatting in a new branch and then merged it with master. Once HEAD was where I wanted it on master, I simply merged the good branch with all of the updates (THEY WERE KEPT, THANK GOD. THAT’S WHAT I WAS MOST AFRAID OF LOSING) to master and everything got updated properly :) ]

Holy cow. Learned a lesson that kept me up 2 hours extra late tonight.
Merging. Say you’ve messed around on an experimental branch with a file and pretty much screwed it up. You switch back to master. You branch off and make real updates. Somehow, the weird changes get committed to master. Now you want to merge the real updates back into master… so what to do?

This is what I learned:

a) On the branch that has your final updates you want to merge to master, make sure you have checked out the commit that you want to merge (see step 2-3 below) 
b) git checkout master

1. use git log --pretty=format:"%h %s" --graph or git log -p -5 to show your most recent commits on the master branch. 
2. Copy the hash of the commit that was normal and good before getting screwed up.
3. use git checkout <hash of commit>
4. You are in ‘detached HEAD’ state, but next step is git merge finalFile ( which is the branch of your real work that you want to save on master )
5. git push origin master.


11-27-2017
Force Push updates, re: correcting history on github.com

1. for if you have screwed up a branch on github and wish to push a branch that you have modified on git
2. Use ‘git push origin <branch> —force’ to force a fast-forward on github.com











